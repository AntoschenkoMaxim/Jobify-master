import Job from '../models/Job.js'
import { StatusCodes } from 'http-status-codes'
import { BadRequestError, NotFoundError, UnAuthenticatedError } from '../errors/index.js'
import checkPermissions from '../utils/checkPermissions.js'
import moment from 'moment'

import { Markup, Telegraf } from 'telegraf'
import dotenv from 'dotenv'
dotenv.config()
import commands from '../bot/commandsForBot.js'
import text from '../bot/textForBot.js'

const botJobs = new Telegraf(process.env.BOT_TOKEN)
botJobs.start((ctx) => ctx.reply(`–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å, ${ctx.message.from.first_name ? ctx.message.from.first_name : '–¥–æ—Ä–æ–≥–æ–π –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü'}!`))
botJobs.help((ctx) => ctx.reply(commands))
botJobs.command('info', async (ctx) => {
	try {
		await ctx.replyWithHTML('<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–∞–π—Ç—É</b>', Markup.inlineKeyboard(
			[
				[Markup.button.callback('–ß–∏—Ç–∞—Ç—å', 'btn_follow')]
			]
		))
	} catch (e) {
		console.error(e)
	}
})

botJobs.command('chats', async (ctx) => {
	try {
		await ctx.replyWithHTML('<b>–ü–æ—Ö–æ–∂–µ –≤—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è. –ß–∞—Ç –æ–±—â–∏–π - –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π/–∫—É—Ä—Å–æ–≤/–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤. –ß–∞—Ç —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö, —á–∞—Ç —Å –∫—É—Ä—Å–∞–º–∏ –æ –∫—É—Ä—Å–∞—Ö, —á–∞—Ç —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ. üëã</b>', Markup.inlineKeyboard(
			[
				[Markup.button.url('–û–±—â–∏–π', 't.me/+rEzMP3bmUS84Nzgy')],
				[Markup.button.url('–í–∞–∫–∞–Ω—Å–∏–∏', 't.me/+IlT14GqWwxAyNzgy')],
				[Markup.button.url('–ö—É—Ä—Å—ã', 't.me/+FddajcyAKmkxZWM6')],
				[Markup.button.url('–ö–∞–Ω–¥–∏–¥–∞—Ç—ã', 't.me/+1j3NL7yL3jtkMzRi')],
			]
		))
	} catch (e) {
		console.error(e)
	}
})

function addActionBot(name, src, text) {
	botJobs.action(name, async (ctx) => {
		try {
			await ctx.answerCbQuery()
			if (src !== false) {
				await ctx.replyWithPhoto({
					source: src
				})
			}
			await ctx.replyWithHTML(text, {
				disable_web_page_preview: true
			})
		} catch (e) {
			console.error(e)
		}
	})
}

addActionBot('btn_follow', './img/logo.jpg', text)
botJobs.launch()

const createJob = async (req, res) => {
	const { position, company } = req.body

	if (!position || !company) {
		throw new BadRequestError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!')
	}
	req.body.createdBy = req.user.userId
	const job = await Job.create(req.body)
	res.status(StatusCodes.CREATED).json({ job })

	const formatData = `	
		–í—ã—à–ª–∞ –Ω–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è:üëá
		–ö–æ–º–ø–∞–Ω–∏—è: ${job.company},
		–î–æ–ª–∂–Ω–æ—Å—Ç—å: ${job.position},
		–°—Ç–∞—Ç—É—Å: ${job.status},
		–ú–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ: ${job.jobLocation}
		–ó–∞–Ω—è—Ç–æ—Å—Ç—å: ${job.jobType}
`
	await botJobs.telegram.sendMessage(process.env.CHAT_JOBS_ID, `${formatData}`);
	await botJobs.telegram.sendMessage(process.env.CHAT_ALL_ID, `${formatData}`);
}


const getAllJobs = async (req, res) => {
	const { search, status, jobType, sort } = req.query

	const queryObject = {
		createdBy: req.user.userId,
	}
	// –ø–æ–∏—Å–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É, —Ç–∏–ø—É –≤–∞–∫–∞–Ω—Å–∏–∏, –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
	if (status && status !== '–≤—Å–µ') {
		queryObject.status = status
	}

	if (jobType && jobType !== '–≤—Å–µ') {
		queryObject.jobType = jobType
	}

	if (search) {
		queryObject.position = { $regex: search, $options: 'i' }
	}

	let result = Job.find(queryObject)

	if (sort === '–Ω–æ–≤—ã–µ') {
		result = result.sort('-createdAt')
	}

	if (sort === '—Å—Ç–∞—Ä—ã–µ') {
		result = result.sort('createdAt')
	}

	if (sort === 'a-z') {
		result = result.sort('position')
	}

	if (sort === 'z-a') {
		result = result.sort('-position')
	}
	// pagination
	const page = Number(req.query.page) || 1
	const limit = Number(req.query.limit) || 10
	const skip = (page - 1) * limit
	result = result.skip(skip).limit(limit)
	//125
	// 10 10 10 10 10 10 10 10 10 10 10 10 5

	const jobs = await result
	const totalJobs = await Job.countDocuments(queryObject)
	const numOfPages = Math.ceil(totalJobs / limit)

	res.status(StatusCodes.OK).json({ jobs, totalJobs, numOfPages })
}

const getAllJobsWithoutUser = async (req, res) => {
	const { search, status, jobType, sort } = req.query

	const queryObject = {

	}
	// –ø–æ–∏—Å–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É, —Ç–∏–ø—É –≤–∞–∫–∞–Ω—Å–∏–∏, –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
	if (status && status !== '–≤—Å–µ') {
		queryObject.status = status
	}

	if (jobType && jobType !== '–≤—Å–µ') {
		queryObject.jobType = jobType
	}

	if (search) {
		queryObject.position = { $regex: search, $options: 'i' }
	}

	let result = Job.find(queryObject)

	if (sort === '–Ω–æ–≤—ã–µ') {
		result = result.sort('-createdAt')
	}

	if (sort === '—Å—Ç–∞—Ä—ã–µ') {
		result = result.sort('createdAt')
	}

	if (sort === 'a-z') {
		result = result.sort('position')
	}

	if (sort === 'z-a') {
		result = result.sort('-position')
	}
	// pagination
	const page = Number(req.query.page) || 1
	const limit = Number(req.query.limit) || 10
	const skip = (page - 1) * limit
	result = result.skip(skip).limit(limit)
	//125
	// 10 10 10 10 10 10 10 10 10 10 10 10 5

	const jobs = await result
	const totalJobs = await Job.countDocuments(queryObject)
	const numOfPages = Math.ceil(totalJobs / limit)

	res.status(StatusCodes.OK).json({ jobs, totalJobs, numOfPages })
}

const updateJob = async (req, res) => {
	const { id: jobId } = req.params
	const { company, position } = req.body

	if (!position || !company) {
		throw new BadRequestError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!')
	}

	const job = await Job.findOne({ _id: jobId })

	if (!job) {
		throw new NotFoundError(`–ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —Ç–∞–∫–∏–º id: ${jobId}`)
	}

	//check permissions

	checkPermissions(req.user, job.createdBy)

	const updatedJob = await Job.findOneAndUpdate({ _id: jobId }, req.body, {
		new: true,
		runValidators: true,
	})

	res.status(StatusCodes.OK).json({ updatedJob })
}

const deleteJob = async (req, res) => {
	const { id: jobId } = req.params

	const job = await Job.findOne({ _id: jobId })

	if (!job) {
		throw new NotFoundError(`No job with id: ${jobId}`)
	}

	checkPermissions(req.user, job.createdBy)

	await job.remove()
	res.status(StatusCodes.OK).json({ msg: '–£—Å–ø–µ—à–Ω–æ! –í–∞–∫–∞–Ω—Å–∏—è —É–¥–∞–ª–µ–Ω–∞' })

	const formatData = `	
		–£–¥–∞–ª–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è –≤–∞–∫–∞–Ω—Å–∏—è:üëá
		–ö–æ–º–ø–∞–Ω–∏—è: ${job.company},
		–î–æ–ª–∂–Ω–æ—Å—Ç—å: ${job.position},
		–°—Ç–∞—Ç—É—Å: ${job.status},
		–ú–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ: ${job.jobLocation}
		–ó–∞–Ω—è—Ç–æ—Å—Ç—å: ${job.jobType}
`
	await botJobs.telegram.sendMessage(process.env.CHAT_JOBS_ID, `${formatData}`);
	await botJobs.telegram.sendMessage(process.env.CHAT_ALL_ID, `${formatData}`);
}

const showStats = async (req, res) => {
	let stats = await Job.aggregate([
		// { $match: { createdBy: mongoose.Types.ObjectId(req.user.userId) } },
		//–ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞—à–∏ —Ä–∞–±–æ—Ç—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ id
		{ $group: { _id: '$status', count: { $sum: 1 } } },
		//–∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
	])

	// –≤—ã–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
	stats = stats.reduce((acc, curr) => {
		const { _id: title, count } = curr
		acc[title] = count
		return acc
	}, {})

	// –∑–∞–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –¥–æ–±–∞–≤—è—Ç —Ä–∞–±–æ—Ç—É
	const defaultStats = {
		pending: stats.pending || 0,
		interview: stats.interview || 0,
		declined: stats.declined || 0,
	}

	let monthlyApplications = await Job.aggregate([
		// { $match: { createdBy: mongoose.Types.ObjectId(req.user.userId) } },
		{
			$group: {
				_id: {
					year: {
						$year: '$createdAt',
					},
					month: {
						$month: '$createdAt',
					},
				},
				count: { $sum: 1 },
			},
		},
		{ $sort: { '_id.year': -1, '-id.month': -1 } },
		{ $limit: 6 },
	])
	monthlyApplications = monthlyApplications.map((item) => {
		const { _id: { year, month }, count } = item
		const date = moment().month(month - 1).year(year).format('MMM Y')
		return { date, count }
	}).reverse()

	res.status(StatusCodes.OK).json({ defaultStats, monthlyApplications })

}


export { createJob, deleteJob, getAllJobs, getAllJobsWithoutUser, updateJob, showStats }